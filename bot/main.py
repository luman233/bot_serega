import asyncio
import os
from datetime import datetime, timedelta, timezone
from pyrogram import Client
from pyrogram.types import Message
from config import API_ID, API_HASH, SESSION_STRING, SOURCE_GROUP_IDS, TRIGGER_WORDS

# üîí –ß–∏—Å–ª–æ–≤–æ–π ID —Ü–µ–ª–µ–≤–æ–π –≥—Ä—É–ø–ø—ã
TARGET_GROUP_ID = -1002854897694

# –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–∏–Ω—É—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–µ—Ä–∏–æ–¥–∞ (–Ω–µ –∫—Ä–∏—Ç–∏—á–Ω–æ, –ø—Ä–æ—Å—Ç–æ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏)
PERIOD_MINUTES = 10

# –ö–ª–∏–µ–Ω—Ç UserBot
app = Client(
    "userbot",
    api_id=API_ID,
    api_hash=API_HASH,
    session_string=SESSION_STRING
)

def is_trigger(text: str) -> bool:
    return any(word.lower() in text.lower() for word in TRIGGER_WORDS)

def get_id_file(group_id) -> str:
    safe_id = str(group_id).replace("@", "").replace("-", "m")
    return f"processed_ids_{safe_id}.txt"

def load_processed_ids(group_id) -> set:
    fname = get_id_file(group_id)
    if os.path.exists(fname):
        with open(fname, "r") as f:
            try:
                return set(map(int, f.read().strip().splitlines()))
            except:
                return set()
    return set()

def save_processed_id(group_id, msg_id: int):
    fname = get_id_file(group_id)
    with open(fname, "a") as f:
        f.write(f"{msg_id}\n")

def format_forwarded_message(msg: Message) -> str:
    text = msg.text or ""
    text += "\n\n"

    if msg.chat.username:
        chat_link = f"https://t.me/{msg.chat.username}"
    elif str(msg.chat.id).startswith("-100"):
        chat_link = f"https://t.me/c/{str(msg.chat.id)[4:]}"
    else:
        chat_link = str(msg.chat.id)

    text += chat_link + "\n"
    text += (msg.chat.title or str(msg.chat.id)) + "\n"

    if msg.from_user and msg.from_user.username:
        text += f"@{msg.from_user.username}"
    elif msg.from_user:
        text += f"ID: {msg.from_user.id}"
    else:
        text += "–ë–µ–∑ –∏–º–µ–Ω–∏"

    return text

async def process_group(client, group_id):
    processed_ids = load_processed_ids(group_id)
    print(f"\nüîç –û–±—Ä–∞–±–æ—Ç–∫–∞ –≥—Ä—É–ø–ø—ã: {group_id}, —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {len(processed_ids)} —Å–æ–æ–±—â–µ–Ω–∏–π")

    async for msg in client.get_chat_history(group_id, limit=100):
        if not isinstance(msg, Message) or not isinstance(msg.id, int):
            continue

        if msg.id in processed_ids:
            print(f"‚è≠ –ü—Ä–æ–ø—É—â–µ–Ω–æ msg.id {msg.id}: —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω")
            continue

        if not msg.text:
            print(f"üì≠ –ü—Ä–æ–ø—É—â–µ–Ω–æ msg.id {msg.id}: –Ω–µ—Ç —Ç–µ–∫—Å—Ç–∞")
            save_processed_id(group_id, msg.id)
            continue

        if msg.from_user and msg.from_user.is_self:
            print(f"üôã –ü—Ä–æ–ø—É—â–µ–Ω–æ msg.id {msg.id}: –º–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ")
            save_processed_id(group_id, msg.id)
            continue

        if is_trigger(msg.text):
            print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ –≤ msg.id {msg.id}")
            try:
                formatted = format_forwarded_message(msg)
                await client.send_message(TARGET_GROUP_ID, formatted)
                print(f"üì§ –ü–µ—Ä–µ—Å–ª–∞–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: {msg.text[:40]}")
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ—Å—ã–ª–∫–∏ msg.id {msg.id}: {e}")

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ –≤ –ª—é–±–æ–º —Å–ª—É—á–∞–µ
        save_processed_id(group_id, msg.id)

async def main():
    now = datetime.now(timezone.utc)
    after = now - timedelta(minutes=PERIOD_MINUTES)
    print(f"üïí –ü–µ—Ä–∏–æ–¥: {after} ... {now}")
    print("üì• –ò—Å—Ç–æ—á–Ω–∏–∫: ", SOURCE_GROUP_IDS)
    print("üì§ –¶–µ–ª–µ–≤–∞—è –≥—Ä—É–ø–ø–∞:", TARGET_GROUP_ID)

    async with app:
        try:
            chat = await app.get_chat(TARGET_GROUP_ID)
            print("‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ü–µ–ª–µ–≤–æ–π –≥—Ä—É–ø–ø–µ:", chat)
        except Exception as e:
            print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —á–∞—Ç: {e}")

        for group in SOURCE_GROUP_IDS:
            await process_group(app, group)

if __name__ == "__main__":
    app.run(main())
